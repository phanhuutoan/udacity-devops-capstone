version: 2.1
orbs:
  node: circleci/node@5.1.0
  kubernetes: circleci/kubernetes@1.3.1
commands:
  aws-setup:
    steps:      
      - run:
          name: install aws
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: configure aws
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region us-east-1
jobs:
  lint-check: # this can be any name you choose
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - save_cache:
          key: node-cache-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
            - apps/todo-be/node_modules
            - apps/todo-fe/node_modules
      - run: 
          name: lint
          command: yarn lint
  audit: # this can be any name you choose
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - restore_cache:
          keys: 
            - node-cache-{{ checksum "yarn.lock" }}
            - node-cache-
      - run: 
          name: run audit
          command: yarn run improved-yarn-audit --min-severity critical
  build-fe:
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - restore_cache:
          keys: 
            - node-cache-{{ checksum "yarn.lock" }}
            - node-cache-
      - run: 
          name: build frontend
          command: yarn build-fe 
  build-be:
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - restore_cache:
          keys: 
            - node-cache-{{ checksum "yarn.lock" }}
            - node-cache-
      - run: 
          name: build backend
          command: yarn build-be 
  fe-unit-test:
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - restore_cache:
          keys: 
            - node-cache-{{ checksum "yarn.lock" }}
            - node-cache-
      - run: 
          name: UT frontend
          command: yarn test-fe 
      - store_test_results:
          path: apps/todo-fe/coverage
  be-unit-test:
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - restore_cache:
          keys: 
            - node-cache-{{ checksum "yarn.lock" }}
            - node-cache-
      - run: 
          name: UT backend
          command: yarn test-be
      - store_test_results:
          path: apps/todo-be/coverage
  

  build-and-push-img-fe:
    docker:
      - image: docker:17.05.0-ce-git
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true # DLC will explicitly cache layers here and try to avoid rebuilding.
      - run: 
          name: login docker
          command: docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - run: 
          name: build docker FE image
          command: |
            scripts/build-images.sh fe latest 
            scripts/build-images.sh fe ${CIRCLE_SHA1:0:7}
      - run: 
          name: push docker images
          command: |
            bash scripts/push-images.sh latest fe
            bash scripts/push-images.sh "${CIRCLE_SHA1:0:7}" fe
  build-and-push-img-be:
    docker:
      - image: docker:17.05.0-ce-git
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD  # context / project UI env-var reference
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true # DLC will explicitly cache layers here and try to avoid rebuilding.
      - run: 
          name: login docker
          command: docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - run: 
          name: build docker BE image
          command: |
            scripts/build-images.sh be latest 
            scripts/build-images.sh be "${CIRCLE_SHA1:0:7}"
      - run: 
          name: push docker images
          command: |
            bash scripts/push-images.sh latest be
            bash scripts/push-images.sh "${CIRCLE_SHA1:0:7}" be

  run-migration-job:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-setup
      - kubernetes/install-kubectl
      - kubernetes/install-kubeconfig:
          kubeconfig: KUBECONFIG_DATA
      - run:
          name: Run migration job and wait until finish
          command: | 
            kubectl apply -f k8s/prod/jobs/migration-job.yml
            kubectl wait --for=condition=complete --timeout=100s job/migration
      - run: 
          name: Check the result
          command: scripts/check-migration.sh
      - run: 
          name: Clean job
          command: kubectl delete job migration
    
  deploy-be-fe:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-setup
      - kubernetes/install-kubectl
      - kubernetes/install-kubeconfig:
          kubeconfig: KUBECONFIG_DATA
      - run:
          name: deploy frontend
          command: | 
            kubectl set image deployment/todo-fe todo-fe=superknife0512/todo-fe:${CIRCLE_SHA1:0:7}
             kubectl rollout status deployment todo-fe
      - run:
          name: deploy backend
          command: | 
            kubectl set image deployment/todo-be todo-be=superknife0512/todo-be:${CIRCLE_SHA1:0:7}
            kubectl rollout status deployment todo-be
      - run:
          name: smoke test
          command: './scripts/smoke-test.sh'
      - run:
          name: revert
          command: |
            kubectl rollout undo deployment todo-be
            kubectl rollout undo deployment todo-fe
          when: on_fail
      
workflows:
  build_and_test:
    jobs:
      # - lint-check
      # - audit:
      #     requires: 
      #     - lint-check

      # - build-fe:
      #     requires: 
      #     - audit
      # - build-be:
      #     requires: 
      #     - audit
      # - fe-unit-test:
      #     requires: 
      #     - audit
      # - be-unit-test:
      #     requires: 
      #     - audit
      - build-and-push-img-fe
      - build-and-push-img-be

      - run-migration-job:
          requires:
            - build-and-push-img-be
      
      - deploy-be-fe:
          requires:
            - run-migration-job
            - build-and-push-img-fe
      
